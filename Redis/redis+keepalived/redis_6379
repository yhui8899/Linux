#!/bin/bash
# Author: liaojunhua 
# QQ: 563293401
# redis and keepalived install script

# Source function library.
. /etc/init.d/functions

EXEC=/usr/local/bin/redis-server
CLIEXEC=/usr/local/bin/redis-cli
PIDFILE=/var/run/redis_6379.pid
REDISPORT="6379"
PASS="P@SSW0RD"
REDISPATH=/etc/redis
LOGFILE=/var/log/redis-state.log
LogDate=$(date +"%F %T")

LOCALIP=192.168.50.91
REMOTEIP=192.168.50.92


case "$1" in
    start)
        if [ -f $PIDFILE ]
        then
            echo "$PIDFILE exists, process is already running or crashed"
        else
            echo "Starting Redis server..."
            REMOTEIPPING=`$CLIEXEC -h $REMOTEIP -a $PASS PING 2>/tmp/redis_status.log`
            if [ "$REMOTEIPPING" == "PONG"  ]; then
                REMOTEREDISROLE=`$CLIEXEC -h $REMOTEIP -a $PASS info |grep "role"`
                if grep "role:master" <<< $REMOTEREDISROLE ; then
                    #if remoteip is master, start as slave
                    echo "$LogDate Slave" >> $LOGFILE
                    $EXEC $REDISPATH/redis_slave.conf
                else
                    #start as master
                    echo "$LogDate Master" >> $LOGFILE
                    $EXEC $REDISPATH/redis_master.conf
                fi
            else
                #start as master
                echo "$LogDate Master" >> $LOGFILE
                $EXEC $REDISPATH/redis_master.conf
            fi
        fi
        ;;
    stop)
        if [ ! -f $PIDFILE ]
        then
            echo "$PIDFILE does not exist, process is not running"
        else
            PID=$(cat $PIDFILE)
            echo "Stopping ..."
            $CLIEXEC -a $PASS -p $REDISPORT shutdown
            while [ -x /proc/${PID} ]
            do
                echo "Waiting for Redis to shutdown ..."
                sleep 1
            done
            echo "Redis stopped"
        fi
        ;;
    status)
        PID=$(cat $PIDFILE)
        if [ ! -x /proc/${PID} ]
        then
            echo 'Redis is not running'
        else
            echo "Redis is running ($PID)"
        fi
        ;;
    restart)
        $0 stop
        $0 start
        ;;
    *)
        echo "Please use start, stop, restart or status as first argument"
        ;;
esac
